import{createAndInjectStyle}from"./helpers/createAndInjectStyle";import{generateColorStyleText}from"./helpers/generateColorStyleText";import{getAccessibleClassName}from"./helpers/getAccessibleClassName";import{getCssVariableResult}from"./helpers/getCssVariableResult";import{getScreenStyleResult}from"./helpers/getScreenStyleResult";import{parseStyle}from"./helpers/parseStyle";const styled=e=>{var{hashedClasses:e,styleResult:s,screenStyleResult:t,cssVariablesResult:l,scope:r}=parseStyle(e),l=getCssVariableResult(l),{screenAccessibleClass:t,screenCssText:a}=getScreenStyleResult(t,e),s=[...s,...a,l].join(""),a=(createAndInjectStyle(s),getAccessibleClassName(r,{...e,...t}));return a};class Theme extends HTMLElement{constructor(){super();var e=generateColorStyleText(Theme.color),s=`sw-theme{${Theme.variable}}`;createAndInjectStyle(e+s)}}Theme.color={},Theme.fsDisplay="1",Theme.variable="",customElements.define("sw-theme",Theme);export{styled,Theme};